#!/bin/bash

if [[ -z "$OPENSTACK_VERSION" ]] ; then
  echo "OPENSTACK_VERSION is expected (e.g. export OPENSTACK_VERSION=newton)"
  exit 1
fi

DEBUG=${DEBUG:-0}

if (( DEBUG == 1 )) ; then
  set -x ;
fi

function set_x() {
  if (( DEBUG == 1 )) ; then
    return
  fi
  set $@
}

MAX_FAIL=${MAX_FAIL:-30}
SSH_CMD=${SSH_CMD:-'ssh'}

UNDERCLOUDRC_FILE=${UNDERCLOUDRC_FILE:-"${WORKSPACE}/stackrc"}
KEYSTONE_API_VERSION=${KEYSTONE_API_VERSION:-'2'}
OVERCLOUDRC_FILE_DEFAULT=${OVERCLOUDRC_FILE_DEFAULT:-"$WORKSPACE/overcloudrc"}
if [[ "${KEYSTONE_API_VERSION}" == '2' ]] ; then
  OVERCLOUDRC_FILE=${OVERCLOUDRC_FILE:-${OVERCLOUDRC_FILE_DEFAULT}}
else
  OVERCLOUDRC_FILE=${OVERCLOUDRC_FILE:-"$WORKSPACE/overcloudrc.v${KEYSTONE_API_VERSION}"}
  if [[ -n "$OVERCLOUDRC_FILE" && ! -f "$OVERCLOUDRC_FILE" && -f "$OVERCLOUDRC_FILE_DEFAULT" ]] ; then
    # Fallback to default file:
    # OSP13 has only v3 and file is named w/o v3 suffix
    OVERCLOUDRC_FILE=$OVERCLOUDRC_FILE_DEFAULT
  fi
fi

KEEP_VM_AFTER_TEST=${KEEP_VM_AFTER_TEST:-"false"}


function activate_venv() {
  if [ -d "$WORKSPACE/.venv" ]; then
    source "$WORKSPACE/.venv/bin/activate"
  fi
}

function deactivate_venv() {
  if [ -d "$WORKSPACE/.venv" ]; then
    deactivate
  fi
}

function create_virtualenv() {
  rm -rf "$WORKSPACE/.venv"
  echo "INFO: Create venv"
  virtualenv "$WORKSPACE/.venv"

  activate_venv
  pip install -q "cmd2<=0.9.0" "python-openstackclient==3.13" 2>/dev/null
  # NOTE: version 9.0 always writes debug output if run via openstack
  pip install -q "python-novaclient<9.0" 2>/dev/null
  deactivate_venv
}

function instance_status() {
  openstack $OVERCLOUD_TLS_OPTS server show $1 | awk '/ status / {print $4}'
}

function image_status() {
  openstack $OVERCLOUD_TLS_OPTS image show $1 | awk '/ status / {print $4}'
}

function wait_instance() {
  local instance_id=$1
  local max_fail=$2
  local wait_status=${3:-ACTIVE}
  echo "INFO: Wait for status '$wait_status' of instance '$instance_id'"
  local fail=0
  local timeout=10
  while [[ true ]] ; do
    if ((fail >= max_fail)); then
      echo '' >> errors
      echo "ERROR: Instance status wait timeout occured" >> errors
      openstack $OVERCLOUD_TLS_OPTS server show $instance_id >> errors
      return 1
    fi
    echo "attempt $fail of $max_fail"
    status=$(instance_status $instance_id)
    if [[ "$status" == "$wait_status" ]]; then
      break
    fi
    if [[ "$status" == "ERROR" || -z "$status" ]]; then
      echo '' >> errors
      echo 'ERROR: Instance booting error' >> errors
      openstack $OVERCLOUD_TLS_OPTS server show $instance_id >> errors
      return 1
    fi
    sleep $timeout
    ((timeout+=5))
    ((++fail))
  done
}

function wait_image() {
  local image_id=$1
  local max_fail=$2
  local wait_status=$3
  echo "INFO: Wait for image: $image_id"
  local fail=0
  local timeout=10
  while [[ true ]] ; do
    if ((fail >= max_fail)); then
      echo '' >> errors
      echo "ERROR: Image status wait timeout occured" >> errors
      openstack $OVERCLOUD_TLS_OPTS image show $image_id >> errors
      return 1
    fi
    echo "attempt $fail of $max_fail"
    status=$(image_status $image_id)
    if [[ "$status" == "$wait_status" || "$status" == 'active' ]]; then
      break
    fi
    if [[ "$status" == "error" || "$status" == "deleted" || -z "$status" ]]; then
      echo '' >> errors
      echo 'ERROR: Image creation error' >> errors
      openstack $OVERCLOUD_TLS_OPTS image show $image_id >> errors
      return 1
    fi
    sleep $timeout
    ((timeout+=5))
    ((++fail))
  done
}

function create_image() {
  local image_name=${1:-cirros}
  local output=''
  activate_venv
  if ! output=`openstack $OVERCLOUD_TLS_OPTS image show $image_name 2>/dev/null` ; then
    rm -f cirros-0.3.4-x86_64-disk.img
    wget -t 2 -T 60 -q http://download.cirros-cloud.net/0.3.4/cirros-0.3.4-x86_64-disk.img
    if ! output=`openstack $OVERCLOUD_TLS_OPTS image create --public --file cirros-0.3.4-x86_64-disk.img $image_name` ; then
      return 1
    fi
  fi
  local image_id=`echo "$output" | awk '/ id /{print $4}'`
  deactivate_venv
  echo $image_id
}

function create_flavors() {
  activate_venv
  if ! openstack $OVERCLOUD_TLS_OPTS flavor show 51 &>/dev/null ; then
    openstack $OVERCLOUD_TLS_OPTS flavor create --disk 1 --vcpus 1 --ram 128 --id 51 test_flavor1 >/dev/null
    if [[ "$DPDK" != 'off' ]]; then
      openstack $OVERCLOUD_TLS_OPTS flavor set --property hw:mem_page_size=any 51
    fi
  fi
  if ! openstack $OVERCLOUD_TLS_OPTS flavor show 52 &>/dev/null ; then
    openstack $OVERCLOUD_TLS_OPTS flavor create --disk 1 --vcpus 1 --ram 256 --id 52 test_flavor2 >/dev/null
    if [[ "$DPDK" != 'off' ]]; then
      openstack $OVERCLOUD_TLS_OPTS flavor set --property hw:mem_page_size=any 52
    fi
  fi
  deactivate_venv
}

function create_network() {
  local netsfx=$1
  activate_venv

  echo "INFO: Create public network and subnet"
  openstack $OVERCLOUD_TLS_OPTS network create --external public-$netsfx
  # bug https://bugs.launchpad.net/juniperopenstack/+bug/1713810
  sleep 5 ; openstack $OVERCLOUD_TLS_OPTS network set --no-share public-$netsfx
  local public_net_id=`openstack $OVERCLOUD_TLS_OPTS network show public-$netsfx -f value -c id`
  openstack $OVERCLOUD_TLS_OPTS subnet create --no-dhcp --network $public_net_id --subnet-range 10.5.0.0/24 --gateway 0.0.0.0 public-$netsfx

  echo "INFO: Create private network and subnet"
  openstack $OVERCLOUD_TLS_OPTS network create --internal private-$netsfx
  local private_net_id=`openstack $OVERCLOUD_TLS_OPTS network show private-$netsfx -f value -c id`
  openstack $OVERCLOUD_TLS_OPTS subnet create --network $private_net_id --subnet-range 10.10.0.0/24 private-$netsfx
  local private_subnet_id=`openstack $OVERCLOUD_TLS_OPTS subnet list | grep "$private_net_id" | awk '{print($2)}'`

  echo "INFO: Create router"
  openstack $OVERCLOUD_TLS_OPTS router create p-ext-$netsfx
  local router_id=`openstack $OVERCLOUD_TLS_OPTS router show p-ext-$netsfx -f value -c id`
  #openstack $OVERCLOUD_TLS_OPTS router set --external-gateway $public_net_id $router_id
  neutron $OVERCLOUD_TLS_OPTS router-gateway-set $router_id $public_net_id
  openstack $OVERCLOUD_TLS_OPTS router add subnet $router_id $private_subnet_id

  echo "INFO: Add rules to default security group"
  local group_id=''
  case $OPENSTACK_VERSION in
    liberty|mitaka|newton|ocata)
      local project_id=`openstack $OVERCLOUD_TLS_OPTS project list | awk '/ admin /{print $2}'`
      group_id=`openstack $OVERCLOUD_TLS_OPTS security group list -c ID -c Project | grep $project_id | awk '{print $2}'`
      ;;
    *)
      group_id=`openstack $OVERCLOUD_TLS_OPTS security group list | grep 'default' | awk '{print $2}'`
      ;;
  esac
  openstack $OVERCLOUD_TLS_OPTS security group rule create $group_id --protocol tcp --dst-port 22:22
  openstack $OVERCLOUD_TLS_OPTS security group rule create $group_id --protocol icmp

  deactivate_venv
}

function delete_network() {
  local netsfx=$1
  activate_venv

  local router_id=`openstack $OVERCLOUD_TLS_OPTS router show p-ext-$netsfx -f value -c id`
  openstack $OVERCLOUD_TLS_OPTS router remove subnet $router_id private-$netsfx
  openstack $OVERCLOUD_TLS_OPTS router delete $router_id

  local private_net_id=`openstack $OVERCLOUD_TLS_OPTS network show private-$netsfx -f value -c id`
  openstack $OVERCLOUD_TLS_OPTS subnet delete private-$netsfx
  openstack $OVERCLOUD_TLS_OPTS network delete private-$netsfx

  deactivate_venv
}

function prep_os_checks() {
  if [[ "${KEYSTONE_API_VERSION}" != '2' ]] ; then
    echo "INFO: For keystone V3 add for user admin the role for domain"
    activate_venv
    if ! openstack $OVERCLOUD_TLS_OPTS role assignment list --domain default --user ${OS_USERNAME} | grep -qi default ; then
      openstack $OVERCLOUD_TLS_OPTS role add --domain default --user admin  admin
    fi
    deactivate_venv
  fi
}

function run_os_checks() {
  # check installed cloud
  activate_venv

  echo "INFO: Check CLI versions:"
  set_x -x
  openstack $OVERCLOUD_TLS_OPTS --version
  set_x +x

  echo "INFO: Check OpenStack catalog first"
  openstack $OVERCLOUD_TLS_OPTS catalog list || keystone catalog || /bin/true
  deactivate_venv

  echo "INFO: Check/create image"
  local image_id=''
  if ! image_id=`create_image` ; then
    return 1
  fi
  echo "INFO: Check/create flavor"
  create_flavors

  local netsfx=$(cat /dev/urandom | tr -cd 'a-f0-9' | head -c 4)
  create_network $netsfx

  activate_venv
  local public_net_id=`openstack $OVERCLOUD_TLS_OPTS network show public-$netsfx -f value -c id`
  local private_net_id=`openstack $OVERCLOUD_TLS_OPTS network show private-$netsfx -f value -c id`
  openstack $OVERCLOUD_TLS_OPTS floating ip create --floating-ip-address 10.5.0.10 $public_net_id
  openstack $OVERCLOUD_TLS_OPTS floating ip create --floating-ip-address 10.5.0.11 $public_net_id
  deactivate_venv

  # next checks will handle return code manually
  set +e

  activate_venv
  echo "INFO: Cirros image information"
  openstack $OVERCLOUD_TLS_OPTS image show $image_id
  local ret=0
  check_instance_simple $private_net_id 10.5.0.10 || ret=1
  echo ''

  sleep 5
  set_x -x
  openstack $OVERCLOUD_TLS_OPTS server list
  set_x +x

  openstack $OVERCLOUD_TLS_OPTS catalog list || keystone catalog || /bin/true
  deactivate_venv

  if [[ $ret == 0 && "$KEEP_VM_AFTER_TEST" != 'true' ]]; then
    openstack $OVERCLOUD_TLS_OPTS floating ip delete 10.5.0.10
    openstack $OVERCLOUD_TLS_OPTS floating ip delete 10.5.0.11
    delete_network $netsfx
  fi

  return $ret
}

function _access_undercloud() {
  if [[ -n "$UNDERCLOUDRC_FILE" && -f "$UNDERCLOUDRC_FILE" ]] ; then
    source $UNDERCLOUDRC_FILE
  fi
}

function _access_overcloud() {
  if [[ -n "$OVERCLOUDRC_FILE" && -f "$OVERCLOUDRC_FILE"  ]] ; then
    source $OVERCLOUDRC_FILE
  fi
}

function access_overcloud() {
  _access_overcloud
}

function _check_instance_log() {
  local id=$1
  # wait for console-log
  echo "INFO: Check that console log is not empty"
  sleep 10
  local log_lines=`openstack $OVERCLOUD_TLS_OPTS console log show $id | wc -l`
  if (( log_lines == 0 )) ; then
    echo "ERROR: console log is empty for instance $instance_id"
    return 1
  fi
  echo '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'
  openstack $OVERCLOUD_TLS_OPTS console log show $id | tail -50
  echo '<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<'
  return 0
}

function _get_machine_by_ip() {
  local ip=$1
  if [[ "$SSH_CMD" == 'juju-ssh' ]] ; then
    juju-status-tabular $ip | grep -A 1 "^Machine" | tail -1 | awk '{print $1}'
  else
    echo heat-admin@$ip
  fi
}

function _get_machines_by_service() {
  local srv=$1
  if [[ "$SSH_CMD" == 'juju-ssh' ]] ; then
    juju-status-tabular $srv | awk "/^$srv\//{print \$4}"
  else
    _access_undercloud
    if [[ "$srv" == 'nova-compute' ]] ; then
      local node_name_regexp='compute'
      if [[ "$DPDK" != 'off' ]]; then
        node_name_regexp='dpdk'
      elif [[ "$TSN" == 'true' ]] ; then
        node_name_regexp='tsn'
      fi
      # tls node: undercloud is w/o tls, so no needs in $OVERCLOUD_TLS_OPTS
      for ip in `openstack server list | grep $node_name_regexp | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+'` ; do
        _get_machine_by_ip $ip
      done
    else
      echo "ERROR: _get_machines_by_service not implemented for service $srv"
      return -1
    fi
    _access_overcloud
  fi
}

function _get_instance_machine() {
  local id=$1
  local host=`openstack $OVERCLOUD_TLS_OPTS server list --long -c ID -c Host | grep $id | awk '{print $4}' | cut -d '.' -f 1`
  local ip=''
  if [[ "$SSH_CMD" == 'juju-ssh' ]] ; then
    ip=`openstack $OVERCLOUD_TLS_OPTS hypervisor list | grep $host | awk '{print $8}'`
  else
    _access_undercloud
    # tls node: undercloud is w/o tls, so no needs in $OVERCLOUD_TLS_OPTS
    ip=`openstack server list | grep $host | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+' | head -n 1`
    _access_overcloud
  fi
  _get_machine_by_ip $ip
}

function _check_new_route() {
  local mch=$1
  local route=$2
  if ! $SSH_CMD $mch "PATH=\$PATH:/usr/sbin ip route" 2>/dev/null | grep -q "$route" ; then
    echo "ERROR: Route $route is absent on host:"
    $SSH_CMD $mch "PATH=\$PATH:/usr/sbin ip route" 2>/dev/null
    return 1
  fi
  return 0
}

function _check_instance_ping() {
  local mch=$1
  local ip=$2
  echo "INFO: Trying to ping instance with ip $ip"
  if ! $SSH_CMD $mch sudo ping -c 2 $ip 2>/dev/null ; then
    echo "ERROR: Can't ping instance by ip $ip"
    return 1
  fi
  echo "INFO: Can ping instance by ip $ip"
  return 0
}

function _check_instance_ssh_and_metadata() {
  local mch=$1
  local ip=$2
  local fip=$3
  local ssh_opts='-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=5'
  echo "INFO: Trying to ssh into instance with ip $ip and run ifconfig"
  if ! $SSH_CMD $mch sshpass -p 'cubswin:\)' ssh $ssh_opts cirros@$ip /sbin/ifconfig 2>/dev/null ; then
    echo "ERROR: Can't ssh into instance by ip $ip"
    return 1
  fi

  echo "INFO: Trying to ssh into instance with ip $ip and get meta-data/public-ipv4"
  if ! output=`$SSH_CMD $mch sshpass -p 'cubswin:\)' ssh $ssh_opts cirros@$ip curl -s http://169.254.169.254/latest/meta-data/public-ipv4 2>/dev/null` ; then
    echo ""
    echo "ERROR: Can't get instance metadata by ssh into ip $ip"
    return 1
  fi
  echo ""
  if ! echo "$output" | grep "$fip" ; then
    echo "ERROR: Can't find public ip $fip in metadata output:"
    echo "$output"
    return 1
  fi
  echo "INFO: Can ssh and get correct metadata for instance by ip $ip"
  return 0
}

function check_instance_simple() {
  if [[ "$TSN" == 'true' ]]; then
    echo "WARNING: TODO: skip instance check for TSN"
    return 0
  fi

  echo "INFO: Check instance with simple flavor"
  local flavor=51
  local net_id=$1
  local fip=$2

  local iname="instance_$flavor"
  if ! output=`openstack $OVERCLOUD_TLS_OPTS server create --flavor $flavor --nic net-id=$net_id --image cirros $iname` ; then
    echo "ERROR: Couldn't boot instance"
    echo "$output"
    return 1
  fi
  local instance_id=`echo "$output" | awk '/ id /{print $4}'`
  local ret=0
  wait_instance $instance_id $((3*MAX_FAIL)) || ret=1
  openstack $OVERCLOUD_TLS_OPTS server add floating ip $instance_id $fip
  if [[ $ret == 0 ]] ; then
    local mch=`_get_instance_machine $instance_id`
    echo "INFO: Instance is on machine $mch"

    _check_instance_log $instance_id || ret=1

    local instance_ip=$(openstack $OVERCLOUD_TLS_OPTS server show $instance_id | awk '/addresses/{print $4}' | cut -d '=' -f 2 | sed 's/,$//g')
    local if_name=$($SSH_CMD $mch sudo vif --list | grep -B 1 $instance_ip | head -1 | awk '{print $3}' | sed 's/\r//g')
    local new_route=$($SSH_CMD $mch sudo curl $INTROSPECT_CURL_OPTS -s "${INTROSPECT_CURL_PROTO}://\$(hostname -f):8085/Snh_ItfReq?name=$if_name" | sed 's/^.*<mdata_ip_addr.*>\([0-9\.]*\)<.mdata_ip_addr>.*$/\1/')

    if [[ -n $new_route ]] ; then
      echo "INFO: Instance's new route is $new_route"
      _check_new_route $mch $new_route || ret=1
      _check_instance_ping $mch $new_route || ret=1
      _check_instance_ssh_and_metadata $mch $new_route $fip || ret=1
    else
      echo "INFO: Couldn't find new route 169.254.0.*"
      ret=1
    fi

    # TODO: for now skip VGW cases:
    # - with DPDK
    # - OSP13, vgw is broken there
    if [[ "$DPDK" == 'off' && 'newton|ocata|pike' =~ $OPENSTACK_VERSION ]]; then
      # add VGW to second compute host and check ping/ssh from there
      local another_compute_host=`_get_machines_by_service nova-compute | grep -v $mch`
      echo "INFO: Adding vgw to another compute: $another_compute_host"
      $SSH_CMD $another_compute_host sudo /opt/contrail/utils/provision_vgw_interface.py --oper create --interface vgw --subnets 10.5.0.0/24 --routes 0.0.0.0/0 --vrf default-domain:admin:public-$netsfx:public-$netsfx

      _check_instance_ping $another_compute_host $fip || ret=1
      _check_instance_ssh_and_metadata $another_compute_host $fip $fip || ret=1

      # remove VGW
      $SSH_CMD $another_compute_host sudo /opt/contrail/utils/provision_vgw_interface.py --oper delete --interface vgw --subnets 10.5.0.0/24 --routes 0.0.0.0/0 --vrf default-domain:admin:public-$netsfx:public-$netsfx
    else
      echo "WARNING: TODO: SKipped for DPDK and OSP13 the test of access by FIP via VGW"
    fi
  fi

  openstack $OVERCLOUD_TLS_OPTS server show $instance_id
  if (( ret == 0 )) ; then
    openstack $OVERCLOUD_TLS_OPTS server delete $instance_id
  fi

  return $ret
}

