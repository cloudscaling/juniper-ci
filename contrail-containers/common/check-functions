#!/bin/bash

function check_rabbitmq_cluster() {
  local dest=( $(echo $1 | sed 's/,/ /g') )
  local err=0
  for d in ${dest[@]} ; do
    if ! $SSH_CMD $d ./check_rabbitmq.sh ; then
      echo ERROR: rabbitmq_cluster_check failed on dest=$d
      (( err+=1 ))
    fi
  done
  return $err
}

function check_introspection_cloud() {
  # Validate cluster's introspection ports
  for dest in $nodes_ips ; do
    $SCP "$my_dir/../__check_introspection.sh" $SSH_USER@${dest}:./check_introspection.sh
  done
  local res=0
  local count=1
  local limit=3
  while ! check_introspection_nodes ; do
    echo "INFO: check_introspection ${count}/${limit} failed"
    if (( count == limit )) ; then
      echo "ERROR: Cloud was not up during timeout"
      res=1
      break
    fi
    (( count+=1 ))
    sleep 30
  done
  test $res == '0'
}

function check_introspection_nodes() {
  local err=0
  local save_opts=''
  if [[ -n "$SSL_ENABLE" ]] ; then
    save_opts="SSL_ENABLE=$SSL_ENABLE"
  fi
  for dest in $nodes_ips ; do
    if ! $SSH_CMD ${SSH_USER}@${dest} "$save_opts sudo -E ./check_introspection.sh" ; then
      echo "ERROR: check_introspection failed on dest=$dest"
      err=1
    fi
  done
  return $err
}

image_name=cirros
function create_image() {
  if ! output=`openstack image show $image_name 2>/dev/null` ; then
    rm -f cirros-0.3.4-x86_64-disk.img
    wget -t 2 -T 60 -q http://download.cirros-cloud.net/0.3.4/cirros-0.3.4-x86_64-disk.img
    openstack image create --public --file cirros-0.3.4-x86_64-disk.img $image_name
  fi
}

function prepare_openstack() {
  create_image

  if ! openstack flavor show m1.ms &>/dev/null ; then
    openstack flavor create --disk 1 --vcpus 1 --ram 128 m1.ms >/dev/null
  fi
  if [[ "$AGENT_MODE" == "dpdk" ]]; then
    openstack flavor set --property hw:mem_page_size=any m1.ms
  fi

  openstack keypair delete my_ms_key 2>/dev/null || /bin/true
  openstack keypair create --public-key $HOME/.ssh/id_rsa.pub my_ms_key

  if ! openstack network show demo-net 2>/dev/null ; then
    openstack network create demo-net
  fi
  if ! openstack subnet list --network demo-net | grep -q demo-subnet ; then
    openstack subnet create --network demo-net --subnet-range 192.168.1.0/24 demo-subnet
  fi
}

# global vars
ssh_opts="-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=5 -i ./id_rsa"
ssh_dest=""

function get_ssh_dest() {
  local hip=`openstack hypervisor list -c "Hypervisor Hostname" -c "Host IP" | grep "$1" | awk '{print $4}'`
  echo "INFO: detect ssh dest - Host: $1 IP: $hip"
  if [[ "$hip" == 'None' ]]; then
    # helm case
    hip=`getent hosts $1 | awk '{print $1}'`
  elif [[ "$HOST" == 'aws' ]]; then
    local i=0
    local cip
    for cip in $nodes_comp_ips_0 ; do
      if [[ "$cip" == "$hip" ]]; then break; fi
      ((++i))
    done
    local ips=( $nodes_comp_ips )
    hip=${ips[$i]}
  fi
  local lip=`hostname -i | cut -d ' ' -f 1`
  if [[ "$hip" != "$lip" ]]; then
    ssh_dest="${SSH_USER:-root}@$hip"
  fi
}

function prepare_for_ssh() {
  scp $HOME/.ssh/id_rsa $ssh_dest:id_rsa
}

function get_vm_iface() {
  local iip=$1
  local if_name=`ssh $ssh_dest sudo vif --list 2>/dev/null| grep -B 1 $iip | awk '/^vif/{print $3}'`
  echo $if_name
}

function get_link_local_ip() {
  local if_name=$1
  local curl_proto='http'
  local curl_ssl_opts=''
  if [[ "${SSL_ENABLE,,}" == 'true' ]] ; then
    local key=${SERVER_KEYFILE:-'/etc/contrail/ssl/private/server-privkey.pem'}
    local cert=${SERVER_CERTFILE:-'/etc/contrail/ssl/certs/server.pem'}
    local ca_cert=${SERVER_CA_CERTFILE:-'/etc/contrail/ssl/certs/ca-cert.pem'}
    curl_ssl_opts="--key $key --cert $cert --cacert $ca_cert"
    curl_proto='https'
  fi
  local curl_ip=$(ssh $ssh_dest hostname -f | cut -d ' ' -f 1)
  local curl_cmd="sudo curl $curl_ssl_opts -s ${curl_proto}://${curl_ip}:8085/Snh_ItfReq?name=$if_name"

  local ip=`ssh $ssh_dest $curl_cmd 2>/dev/null | sed 's/^.*<mdata_ip_addr.*>\([0-9\.]*\)<.mdata_ip_addr>.*$/\1/'`
  echo $ip
}

function wait_instance_ssh() {
  local ip=$1
  echo "INFO: Wait for instance's ssh is ready"
  local fail=0
  while ! ssh $ssh_dest ssh $ssh_opts cirros@$ip whoami 2>/dev/null; do
    ((++fail))
    if ((fail > 12)); then
      echo "ERROR: Instance status wait timeout occured"
      return 1
    fi
    sleep 10
    echo "attempt $fail of 12"
  done
}

function check_simple_instance() {
  local net_id=`openstack network show demo-net -f value -c id`
  openstack server create --image cirros --flavor m1.ms --key-name my_ms_key --nic net-id=$net_id demo1
  sleep 20
  openstack server show demo1
  local iip=`openstack server show demo1 | awk '/addresses/{print $4}' | cut -d '=' -f 2`
  local hhost=`openstack server show demo1 | awk '/OS-EXT-SRV-ATTR:hypervisor_hostname/{print $4}'`
  if [[ -z "$iip" ]]; then
    echo "ERROR: instance is not ready"
    return 1
  fi
  get_ssh_dest $hhost
  prepare_for_ssh
  local vm_iface=`get_vm_iface $iip`
  echo "INFO: VM interface: $vm_iface"
  local fip=`get_link_local_ip $vm_iface`
  if [[ -z "$fip" ]]; then
    echo "ERROR: there is no link-local IP for VM"
    ssh $ssh_dest "ip route ; ip addr"
    return 1
  fi

  ssh $ssh_dest ping -c 3 $fip

  wait_instance_ssh $fip

  # test for outside world
  ssh $ssh_dest ssh $ssh_opts cirros@$fip ping -q -c 1 -W 2 8.8.8.8 2>/dev/null || /bin/true
  # Check the VM can reach the metadata server
  local curl_proto='http'
  local curl_ssl_opts=''
  if [[ "${METADATA_SSL_ENABLE,,}" == 'true' ]] ; then
    curl_proto='https'
    curl_ssl_opts='-k'
  fi
  ssh $ssh_dest ssh $ssh_opts cirros@$fip curl $curl_ssl_opts -s --connect-timeout 5 ${curl_proto}://169.254.169.254/latest/meta-data/local-ipv4 2>/dev/null ; echo ''

  openstack server delete demo1
  sleep 5
}

function check_two_instances() {
  echo "INFO: test ping VM from VM via underlay"
  local net_id=`openstack network show demo-net -f value -c id`
  openstack server create --image cirros --flavor m1.ms --key-name my_ms_key --nic net-id=$net_id demo11
  sleep 10
  openstack server create --image cirros --flavor m1.ms --key-name my_ms_key --nic net-id=$net_id demo12
  sleep 10
  openstack server show demo11
  openstack server show demo12

  local iip1=`openstack server show demo11 | awk '/addresses/{print $4}' | cut -d '=' -f 2`
  local hhost1=`openstack server show demo11 | awk '/OS-EXT-SRV-ATTR:hypervisor_hostname/{print $4}'`
  local iip2=`openstack server show demo12 | awk '/addresses/{print $4}' | cut -d '=' -f 2`
  local hhost2=`openstack server show demo12 | awk '/OS-EXT-SRV-ATTR:hypervisor_hostname/{print $4}'`
  if [[ -z "$iip1" || -z "$iip2" ]]; then
    echo "ERROR: instances are not ready"
    return 1
  fi
  if [[ "$hhost1" == "$hhost2" ]]; then
    echo "WARNING: instances on the same host. test has no sense"
    openstack server delete demo11
    openstack server delete demo12
    return
  fi

  get_ssh_dest $hhost1
  prepare_for_ssh
  local vm_iface1=`get_vm_iface $iip1`
  echo "INFO: VM interface: $vm_iface1"
  local fip1=`get_link_local_ip $vm_iface1`
  if [[ -z "$fip1" ]]; then
    echo "ERROR: there is no link-local IP for VM"
    ssh $ssh_dest "ip route ; ip addr"
    return 1
  fi

  wait_instance_ssh $fip1

  ssh $ssh_dest ssh $ssh_opts cirros@$fip1 ping -c 4 $iip2

  openstack server delete demo11
  openstack server delete demo12
  sleep 5
}
