#!/bin/bash

ccfmy_file="${BASH_SOURCE[0]}"
ccfmy_dir="$(dirname $ccfmy_file)"

source "$ccfmy_dir/definitions"

function save_logs() {
  local cnt_name_pattern="$1"
  set +e
  local save_opts=''
  if [[ -n "$SSL_ENABLE" ]] ; then
    save_opts="SSL_ENABLE=$SSL_ENABLE"
  fi
  # save common docker logs
  local dest=''
  for dest in $nodes_ips ; do
    timeout -s 9 20s $SCP "$ccfmy_dir/../__save-docker-logs.sh" ${SSH_USER}@${dest}:save-docker-logs.sh
    if [[ $? == 0 ]] ; then
      $SSH_CMD ${SSH_USER}@${dest} "CNT_NAME_PATTERN='$cnt_name_pattern' $save_opts sudo -E ./save-docker-logs.sh"
    fi
  done

  # save to workspace
  for dest in $nodes_ips ; do
    if timeout -s 9 30s $SSH_CMD ${SSH_USER}@${dest} "sudo tar -cf logs.tar ./logs ; gzip logs.tar" ; then
      local ldir="$WORKSPACE/logs/$dest"
      mkdir -p "$ldir"
      timeout -s 9 10s $SCP $SSH_USER@${dest}:logs.tar.gz "$ldir/logs.tar.gz"
      pushd "$ldir"
      tar -xf logs.tar.gz
      rm logs.tar.gz
      popd
    fi
  done
}

function get_address() {
  local ssh_ip="$1"
  local ip="$2"
  if [[ ${USE_FQDN,,} == 'true' ]] ; then
    local name=''
    if name=`$SSH_CMD ${SSH_USER}@$ssh_ip "host -4 $ip" 2>/dev/null` ; then
      echo "$name" | awk '{print substr($5,1,length($5)-1)}'
    else
      $SSH_CMD ${SSH_USER}@$ssh_ip "getent hosts $ip" 2>/dev/null | awk '{print $2}'
    fi
  else
    echo $ip
  fi
}

function prepare_image() {
  local image_name="$1"
  local image=`docker images -a -q $image_name`
  if [[ -z "$image" ]]; then
    docker pull centos
    local tname="cprep-$RANDOM"
    docker run -i --name $tname --entrypoint /bin/bash centos -c "yum install -y epel-release && yum install -y python-ipaddress git python-pip sudo vim gcc python-devel && pip install pip --upgrade && hash -r && pip install 'ansible==2.7.11' pycrypto oslo_utils oslo_config jinja2 requests"
    docker commit $tname $image_name
    docker rm $tname
  fi
}

function build_containers() {
  if [[ "$CONTAINER_REGISTRY" == 'build' ]]; then
    $SCP "$my_dir/../__build-containers.sh" ${SSH_USER}@$build_ip:build-containers.sh
  elif [[ "$CONTAINER_REGISTRY" == 'fullbuild' ]]; then
    $SCP "$my_dir/../__build-full.sh" ${SSH_USER}@$build_ip:build-containers.sh
  fi

  echo "$PATCHSET_LIST" > "$WORKSPACE/patches"
  $SCP "$WORKSPACE/patches" ${SSH_USER}@$build_ip:patches
  ssh_env="CONTRAIL_VERSION=$CONTRAIL_VERSION OPENSTACK_VERSION=$OPENSTACK_VERSION"
  ssh_env+=" CONTRAIL_INSTALL_PACKAGES_URL=$CONTRAIL_INSTALL_PACKAGES_URL"
  ssh_env+=" BUILD_NODE_SWAP=$BUILD_NODE_SWAP BUILD_ENV='$BUILD_ENV'"
  echo build env: $ssh_env
  set -o pipefail
  $SSH_CMD ${SSH_USER}@$build_ip "$ssh_env timeout -s 9 180m ./build-containers.sh" |& tee $WORKSPACE/logs/build.log
  set +o pipefail
}

function clone_clean_and_patched_repo() {
  local cad="$1"
  local cad_dir="$WORKSPACE/$cad"
  rm -rf "$cad_dir"
  git clone https://review.opencontrail.org/Juniper/$cad "${cad_dir}"
  local patchlist=''
  if patchlist=`echo "$PATCHSET_LIST" | grep "/$cad"` ; then
    pushd $cad_dir >/dev/null
    eval "$patchlist"
    popd >/dev/null
  fi
}
