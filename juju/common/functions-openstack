#!/bin/bash

MAX_FAIL=30

function activate_venv() {
  if [ -d "$WORKSPACE/.venv" ]; then
    source "$WORKSPACE/.venv/bin/activate"
  fi
}

function deactivate_venv() {
  if [ -d "$WORKSPACE/.venv" ]; then
    deactivate
  fi
}

function create_virtualenv() {
  rm -rf "$WORKSPACE/.venv"
  echo "INFO: Create venv"
  # latest version of software installs incorrect pkg_resources. installing venv without setuptools workarounds this problem.
  virtualenv "$WORKSPACE/.venv"

  activate_venv
  pip install python-openstackclient python-heatclient &> "$WORKSPACE/logs/pip.log"
  deactivate_venv
}

function instance_status() {
  openstack server show $1 | awk '/ status / {print $4}'
}

function image_status() {
  openstack image show $1 | awk '/ status / {print $4}'
}

function wait_instance() {
  local instance_id=$1
  local max_fail=$2
  local wait_status=${3:-ACTIVE}
  echo "INFO: Wait for status '$wait_status' of instance '$instance_id'"
  local fail=0
  local timeout=10
  while [[ true ]] ; do
    if ((fail >= max_fail)); then
      echo '' >> errors
      echo "ERROR: Instance status wait timeout occured" >> errors
      openstack server show $instance_id >> errors
      return 1
    fi
    echo "attempt $fail of $max_fail"
    status=$(instance_status $instance_id)
    if [[ "$status" == "$wait_status" ]]; then
      break
    fi
    if [[ "$status" == "ERROR" || -z "$status" ]]; then
      echo '' >> errors
      echo 'ERROR: Instance booting error' >> errors
      openstack server show $instance_id >> errors
      return 1
    fi
    sleep $timeout
    ((timeout+=5))
    ((++fail))
  done
}

function wait_image() {
  local image_id=$1
  local max_fail=$2
  local wait_status=$3
  echo "INFO: Wait for image: $image_id"
  local fail=0
  local timeout=10
  while [[ true ]] ; do
    if ((fail >= max_fail)); then
      echo '' >> errors
      echo "ERROR: Image status wait timeout occured" >> errors
      openstack image show $image_id >> errors
      return 1
    fi
    echo "attempt $fail of $max_fail"
    status=$(image_status $image_id)
    if [[ "$status" == "$wait_status" || "$status" == 'active' ]]; then
      break
    fi
    if [[ "$status" == "error" || "$status" == "deleted" || -z "$status" ]]; then
      echo '' >> errors
      echo 'ERROR: Image creation error' >> errors
      openstack image show $image_id >> errors
      return 1
    fi
    sleep $timeout
    ((timeout+=5))
    ((++fail))
  done
}

function create_image() {
  local image_name=${1:-cirros}
  local output=''
  activate_venv
  if ! output=`openstack image show $image_name 2>/dev/null` ; then
    rm -f cirros-0.3.4-x86_64-disk.img
    wget -t 2 -T 60 -q http://download.cirros-cloud.net/0.3.4/cirros-0.3.4-x86_64-disk.img
    if ! output=`openstack image create --public --file cirros-0.3.4-x86_64-disk.img $image_name` ; then
      return 1
    fi
  fi
  local image_id=`echo "$output" | awk '/ id /{print $4}'`
  deactivate_venv
  echo $image_id
}

function create_flavors() {
  activate_venv
  if ! openstack flavor show 51 &>/dev/null ; then
    openstack flavor create --disk 1 --vcpus 1 --ram 128 --id 51 test_flavor >/dev/null
    if [[ "$USE_DPDK" == "true" ]]; then
      openstack flavor set --property hw:mem_page_size=any 51
    fi
  fi
  if ! openstack flavor show 52 &>/dev/null ; then
    openstack flavor create --disk 1 --vcpus 1 --ram 256 --id 52 test_flavor_alt >/dev/null
    if [[ "$USE_DPDK" == "true" ]]; then
      openstack flavor set --property hw:mem_page_size=any 52
    fi
  fi
  deactivate_venv
}

function create_network() {
  local netsfx=$1
  activate_venv

  echo "INFO: Create public network and subnet"
  openstack network create --external public-$netsfx
  # bug https://bugs.launchpad.net/juniperopenstack/+bug/1713810
  sleep 5 ; openstack network set --no-share public-$netsfx
  local public_net_id=`openstack network show public-$netsfx -f value -c id`
  local cidr="10.5.0.0/24"
  if ! openstack subnet create --no-dhcp --network $public_net_id --subnet-range $cidr --gateway 0.0.0.0 public-$netsfx ; then
    echo "WARNING: Public subnet creation is too long. Waiting..."
    for i in {1..$MAX_FAIL} ; do
      sleep 10
      echo "INFO: subnet poll #$i from $MAX_FAIL"
      if openstack subnet list --network $public_net_id | grep "$cidr" ; then
        break
      fi
    done
  fi

  echo "INFO: Create private network and subnet"
  openstack network create --internal private-$netsfx
  local private_net_id=`openstack network show private-$netsfx -f value -c id`
  local cidr="10.10.0.0/24"
  if ! openstack subnet create --network $private_net_id --subnet-range $cidr private-$netsfx ; then
    echo "WARNING: Private subnet creation is too long. Waiting..."
    for i in {1..$MAX_FAIL} ; do
      sleep 10
      echo "INFO: subnet poll #$i from $MAX_FAIL"
      if openstack subnet list --network $private_net_id | grep "$cidr" ; then
        break
      fi
    done
  fi
  local private_subnet_id=`openstack subnet list --network $private_net_id -f value -c ID`

  echo "INFO: Create router"
  openstack router create p-ext-$netsfx || /bin/true
  local router_id=`openstack router show p-ext-$netsfx -f value -c id`
  openstack router set --external-gateway $public_net_id $router_id
  for i in {1..$MAX_FAIL} ; do
    if openstack router add subnet $router_id $private_subnet_id ; then
      break
    fi
    echo "INFO: Adding subnet to router failed #$i from $MAX_FAIL"
    sleep 10
  done

  echo "INFO: Add rules to default security group"
  if [[ -n "$OS_USER_DOMAIN_NAME" ]] ; then
    local domain_param=" --domain $OS_USER_DOMAIN_NAME"
  fi
  for group_id in `openstack security group list -c ID --project admin -f value | sort | uniq`; do
    openstack security group rule create $group_id --protocol tcp --dst-port 22:22
    openstack security group rule create $group_id --protocol icmp
  done
  deactivate_venv
}

function delete_network() {
  local netsfx=$1
  activate_venv

  local router_id=`openstack router show p-ext-$netsfx -f value -c id`
  openstack router remove subnet $router_id private-$netsfx
  openstack router delete $router_id

  local private_net_id=`openstack network show private-$netsfx -f value -c id`
  openstack subnet delete private-$netsfx
  openstack network delete private-$netsfx

  deactivate_venv
}

function run_os_checks() {
  if [[ "$USE_SSL_OS" == "true" ]] ; then
    export OS_CACERT="$WORKSPACE/ssl/rootCA.pem"
  fi

  # check installed cloud
  activate_venv

  echo "INFO: Check CLI versions:"
  openstack --version

  echo "INFO: Check OpenStack catalog first"
  openstack catalog list || keystone catalog || /bin/true
  deactivate_venv

  echo "INFO: Check/create image"
  local image_id=''
  if ! image_id=`create_image` ; then
    return 1
  fi
  echo "INFO: Check/create flavor"
  create_flavors

  local netsfx=$(cat /dev/urandom | tr -cd 'a-f0-9' | head -c 4)
  create_network $netsfx

  activate_venv
  local public_net_id=`openstack network show public-$netsfx -f value -c id`
  local private_net_id=`openstack network show private-$netsfx -f value -c id`
  openstack floating ip create --floating-ip-address 10.5.0.10 $public_net_id
  openstack floating ip create --floating-ip-address 10.5.0.11 $public_net_id
  deactivate_venv

  # next checks will handle return code manually
  set +e

  activate_venv
  echo "INFO: Cirros image information"
  openstack image show $image_id
  local ret=0
  check_instance_simple $private_net_id 10.5.0.10 || ret=1
  echo ''

  sleep 15
  openstack server list
  openstack catalog list || keystone catalog || /bin/true

  if [[ $ret == 0 ]]; then
    openstack floating ip delete 10.5.0.10 || /bin/true
    openstack floating ip delete 10.5.0.11 || /bin/true
    #delete_network $netsfx
  fi

  if [[ "$JOB_VERSION" == 'R5' ]]; then
    check_heat
  fi

  deactivate_venv

  return $ret
}

function _check_instance_log() {
  local id=$1
  # wait for console-log
  echo "INFO: Check that console log is not empty"
  sleep 10
  local log_lines=`openstack console log show $id | wc -l`
  if (( log_lines == 0 )) ; then
    echo "ERROR: console log is empty for instance $instance_id"
    return 1
  fi
  echo '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'
  openstack console log show $id | tail -50
  echo '<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<'
  return 0
}

function _get_instance_machine() {
  local id=$1
  local host=`openstack server list --long -c ID -c Host | grep $id | awk '{print $4}'`
  local ip=`openstack hypervisor list | grep $host | awk '{print $8}'`
  get_machine_by_ip $ip
}

function _check_instance_ping() {
  local mch=$1
  local ip=$2
  echo "INFO: Trying to ping instance with ip $ip"
  if ! $SSH_CMD $mch ping -c 2 $ip 2>/dev/null ; then
    echo "ERROR: Can't ping instance by ip $ip"
    return 1
  fi
  echo "INFO: Can ping instance by ip $ip"
  return 0
}

function _check_instance_ssh_and_metadata() {
  local mch=$1
  local ip=$2
  local fip=$3
  local ssh_opts='-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=5'
  echo "INFO: Trying to ssh into instance with ip $ip and run ifconfig"
  if ! $SSH_CMD $mch sshpass -p 'cubswin:\)' ssh $ssh_opts cirros@$ip /sbin/ifconfig 2>/dev/null ; then
    echo "ERROR: Can't ssh into instance by ip $ip"
    return 1
  fi

  echo "INFO: Trying to ssh into instance with ip $ip and get meta-data/public-ipv4"
  if ! output=`$SSH_CMD $mch sshpass -p 'cubswin:\)' ssh $ssh_opts cirros@$ip curl -s http://169.254.169.254/latest/meta-data/public-ipv4 2>/dev/null` ; then
    echo ""
    echo "ERROR: Can't get instance metadata by ssh into ip $ip"
    return 1
  fi
  echo ""
  if ! echo "$output" | grep "$fip" ; then
    echo "WARNING: Can't find public ip $fip in metadata output:"
    echo "$output"
    echo "INFO: check metadata for local ipv4"
    output=`$SSH_CMD $mch sshpass -p 'cubswin:\)' ssh $ssh_opts cirros@$ip curl -s http://169.254.169.254/latest/meta-data/local-ipv4 2>/dev/null`
    if [[ -z "$output" ]] ; then
      echo "WARNING: Can't find local ip-s in metadata output:"
      echo "$output"
      return 1
    fi
  fi
  echo "INFO: Can ssh and get correct metadata for instance by ip $ip"
  return 0
}

function check_instance_simple() {
  echo "INFO: Check instance with simple flavor"
  local flavor=51
  local net_id=$1
  local fip=$2

  local iname="instance_$flavor"
  if ! output=`openstack server create --flavor $flavor --nic net-id=$net_id --image cirros $iname` ; then
    echo "ERROR: Couldn't boot instance"
    echo "$output"
    return 1
  fi
  local instance_id=`echo "$output" | awk '/ id /{print $4}'`
  local ret=0
  wait_instance $instance_id $((3*MAX_FAIL)) || ret=1
  local ip=`openstack server show $instance_id | awk '/addresses/{print $4}' | cut -d '=' -f 2`
  for i in {1..$MAX_FAIL} ; do
    if openstack server add floating ip $instance_id $fip ; then
      break
    fi
    echo "INFO: Adding floating ip to instance failed #$i from $MAX_FAIL"
    sleep 10
  done

  if [[ $ret == 0 ]] ; then
    local mch=`_get_instance_machine $instance_id`
    echo "INFO: Instance is on machine $mch"

    _check_instance_log $instance_id || ret=1

    local if_name=`juju ssh $mch "sudo vif --list" 2>/dev/null | grep -B 1 $ip | head -1 | awk '{print $3}' | sed 's/\r//g'`
    if [[ -z "$if_name" ]]; then
      echo "ERROR: Interface couldn't be found:"
      juju ssh $mch "sudo vif --list"
      ret=1
    fi
    echo "INFO: Private IP is $ip, Interface $if_name"

    local curl_proto='http'
    local curl_ssl_opts=''
    if [[ "${USE_SSL_CONTRAIL,,}" == 'true' ]] ; then
      local key='/etc/contrail/ssl/private/server-privkey.pem'
      local cert='/etc/contrail/ssl/certs/server.pem'
      local ca_cert='/etc/contrail/ssl/certs/ca-cert.pem'
      curl_ssl_opts="--key $key --cert $cert --cacert $ca_cert"
      curl_proto='https'
    fi
    local curl_ip=`juju ssh $mch "hostname -i" 2>/dev/null | cut -d ' ' -f 1`
    local curl_cmd="sudo curl $curl_ssl_opts -s ${curl_proto}://$curl_ip:8085/Snh_ItfReq?name=$if_name"

    local lip=`juju ssh $mch "$curl_cmd" 2>/dev/null | sed 's/^.*<mdata_ip_addr.*>\([0-9\.]*\)<.mdata_ip_addr>.*$/\1/'`
    if [[ -n "$lip" ]] ; then
      echo "INFO: Instance's link-local address is $lip"
      _check_instance_ping $mch $lip || ret=1
      _check_instance_ssh_and_metadata $mch $lip $fip || ret=1
    else
      echo "ERROR: Couldn't find new route 169.254.0.*"
      juju ssh $mch "$curl_cmd" 2>/dev/null | sed 's/^.*<mdata_ip_addr.*>\([0-9\.]*\)<.mdata_ip_addr>.*$/\1/'
      echo "ERROR: full output from intospect port:"
      juju ssh $mch "$curl_cmd" | xmllint --format -
      ret=1
    fi

    # TODO: for now skip VGW cases with DPDK and for R5.x
    if [[ "$USE_DPDK" != "true" && $JOB_VERSION == 'R4' ]]; then
      # add VGW to second compute host and check ping/ssh from there
      local another_compute_host=`get_machines_index_by_service nova-compute | grep -v $mch`
      echo "INFO: Adding vgw to another compute: $another_compute_host"
      $SSH_CMD $another_compute_host sudo /opt/contrail/utils/provision_vgw_interface.py --oper create --interface vgw --subnets 10.5.0.0/24 --routes 0.0.0.0/0 --vrf $VGW_DOMAIN:admin:public-$netsfx:public-$netsfx

      _check_instance_ping $another_compute_host $fip || ret=1
      _check_instance_ssh_and_metadata $another_compute_host $fip $fip || ret=1

      # remove VGW
      $SSH_CMD $another_compute_host sudo /opt/contrail/utils/provision_vgw_interface.py --oper delete --interface vgw --subnets 10.5.0.0/24 --routes 0.0.0.0/0 --vrf $VGW_DOMAIN:admin:public-$netsfx:public-$netsfx
    else
      echo "WARNING: TODO: SKipped for DPDK the test of access by FIP via VGW"
    fi
  fi

  openstack server show $instance_id
  if [[ $ret != 1 ]]; then
    openstack server delete $instance_id
  fi
  return $ret
}

function check_heat() {
  echo "INFO: check heat resources"
  if ! openstack orchestration resource type list | grep ContrailV2 ; then
    echo "ERROR: Contrail's heat resouces not found!"
    openstack orchestration resource type list
    return 1
  fi
  cat >$WORKSPACE/ipam.yaml <<EOF
heat_template_version: 2013-05-23

description: >
  HOT template to creates an ipam

parameters:
  ipam_name:
    type: string
    description: Name of IPAM to be created

resources:
  ipam:
    type: OS::ContrailV2::NetworkIpam
    properties:
      name: { get_param: ipam_name }
EOF

  local fx=$(cat /dev/urandom | tr -cd 'a-f0-9' | head -c 4)
  if ! openstack stack create -t $WORKSPACE/ipam.yaml --parameter ipam_name=testipam teststack-$sfx ; then
    echo "ERROR: Heat resouce creation failed!"
    openstack stack list
    return 1
  fi
  sleep 5
  local status
  if ! status=$(openstack stack show teststack-$sfx | awk '/stack_status /{print $4}') ; then
    echo "ERROR: Heat resouce retreiving failed!"
    openstack stack list
    return 1
  fi
  if [[ $status != "CREATE_COMPLETE" ]]; then
    echo "ERROR: Heat resouce creation failed!"
    openstack stack show teststack-$sfx
    return 1
  fi
  echo "INFO: check heat passed"
}
