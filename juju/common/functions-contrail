#!/bin/bash -e

function apply_ssl() {
  if [[ "${USE_SSL_OS,,}" != "true" && "${USE_SSL_CONTRAIL,,}" != "true" ]] ; then
    return
  fi

  local prefix=$1
  # next variable should be global
  ssl_dir="$WORKSPACE/ssl"
  rm -rf "$ssl_dir"
  mkdir -p "$ssl_dir"

cat >"$ssl_dir/v3.ext" <<EOF
authorityKeyIdentifier=keyid,issuer
basicConstraints=CA:FALSE
keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
EOF

  create_root_ca

  if [[ "${USE_SSL_OS,,}" == "true" ]] ; then
    apply_ssl_os $prefix
  fi
  if [[ "${USE_SSL_CONTRAIL,,}" == "true" ]] ; then
    apply_ssl_contrail $prefix
  fi
}

function create_root_ca() {
  openssl genrsa -out "$ssl_dir/rootCA.key" 2048 &>/dev/null
  openssl req -x509 -new -key "$ssl_dir/rootCA.key" -days 365 -out "$ssl_dir/rootCA.pem" -subj "/C=US/ST=CA/L=SV/O=Juniper/CN=RootCA" &>/dev/null
  cat "$ssl_dir/rootCA.pem" | base64 > "$ssl_dir/rootCA.pem.b64"
}

function apply_ssl_os() {
  # we assume that openstack is deployed in non-ha mode and has not been redeployed
  local prefix=$1
  # due to bug https://bugs.launchpad.net/charm-neutron-api/+bug/1690912 we'll set only keystone SSL
  #local mchs=("$m1" "$m2" "$m3" "$m4" "$m5")
  #local mch_srvs=('openstack-dashboard' 'glance' 'keystone' 'nova-cloud-controller' 'neutron-api')
  local mchs=("keystone/0")
  local mch_srvs=('keystone')
  for i in ${!mchs[@]} ; do
    apply_ssl_config ${mchs[$i]} ${mch_srvs[$i]}
  done
  # instead of adding certificates to other services we have to add rootCA to all other machines
  # (setting ssl_ca for each module doesn't do something useful and keystone doesn't do it byself)
  for mch in "openstack-dashboard/0" "glance/0" "nova-cloud-controller/0" "neutron-api/0" "heat/0" ; do
    echo "INFO: adding rootCA to machine $mch"
    juju-scp "$ssl_dir/rootCA.pem" "${mch}:rootCA.pem"
    juju-ssh $mch sudo mkdir -p /usr/local/share/ca-certificates/openstack
    # update-ca-certificates works only with .crt files
    juju-ssh $mch sudo cp rootCA.pem /usr/local/share/ca-certificates/openstack/rootCA.crt
    juju-ssh $mch sudo update-ca-certificates
  done

  juju-set keystone "use-https=True"

  local srv="${prefix}-keystone-auth"
  local ssl_config="$ssl_dir/ssl_config_$srv.yaml"
  echo "$srv:" > "$ssl_config"
  echo "  ssl_ca: |" >> "$ssl_config"
  cat "$ssl_dir/rootCA.pem.b64" | awk '{printf("    %s\n", $0)}' >> "$ssl_config"
  juju-set $srv --file "$ssl_config"
}

function apply_ssl_config() {
  local mch=$1
  local srv=$2

  local addr=`get-machine-ip-by-number $mch`
  echo "INFO: call 'apply_ssl_config_by_addr $mch $srv $addr'"
  apply_ssl_config_by_addr $mch $srv $addr
}

function apply_ssl_config_by_addr() {
  local mch=$1
  local srv=$2
  local addr=$3

  local mch_id=`echo "$mch" | tr '/' '-'`
  echo "INFO: creating certificate for address: $addr (machine $mch / service $srv)"
  local cfname="cert_m${mch_id}_${addr}"
  openssl genrsa -out "$ssl_dir/$cfname.key" 2048
  openssl req -new -key "$ssl_dir/$cfname.key" -out "$ssl_dir/$cfname.csr" -subj "/C=US/ST=CA/L=Sunnyvale/O=Juniper/CN=$addr"
  openssl x509 -req -in "$ssl_dir/$cfname.csr" -extfile "$ssl_dir/v3.ext" -CA "$ssl_dir/rootCA.pem" -CAkey "$ssl_dir/rootCA.key" -CAcreateserial -out "$ssl_dir/$cfname.pem" -days 365
  cat "$ssl_dir/$cfname.pem" | base64 > "$ssl_dir/$cfname.pem.b64"
  cat "$ssl_dir/$cfname.key" | base64 > "$ssl_dir/$cfname.key.b64"

  local ssl_config="$ssl_dir/ssl_config_m$mch_id.yaml"
  echo "$srv:" > "$ssl_config"
  echo "  ssl_ca: |" >> "$ssl_config"
  cat "$ssl_dir/rootCA.pem.b64" | awk '{printf("    %s\n", $0)}' >> "$ssl_config"
  echo "  ssl_cert: |" >> "$ssl_config"
  cat "$ssl_dir/$cfname.pem.b64" | awk '{printf("    %s\n", $0)}' >> "$ssl_config"
  echo "  ssl_key: |" >> "$ssl_config"
  cat "$ssl_dir/$cfname.key.b64" | awk '{printf("    %s\n", $0)}' >> "$ssl_config"

  juju-set $srv --file "$ssl_config"
}

function apply_ssl_contrail() {
  local prefix=$1

  local mch=`get_machine $prefix-controller`

  juju-deploy cs:~containers/$SERIES/easyrsa --to lxd:$mch
  juju-add-relation easyrsa ${prefix}-controller
  juju-add-relation easyrsa ${prefix}-analytics
  juju-add-relation easyrsa ${prefix}-analyticsdb
  juju-add-relation easyrsa ${prefix}-kubernetes-master || /bin/true
  juju-add-relation easyrsa ${prefix}-agent
}
